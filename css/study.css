@charset "utf-8";


/* id #   class . */

html, body{
    margin: 0;
    padding: 0;
}

#warp {
    background-color: #205e91dc;
    color: #fff;
    text-align: center;
}


.listbox {
    background-color:darkkhaki;
}


/* css 선택자 목록  
참고사이트 :  https://code.tutsplus.com/ko/tutorials/the-30-css-selectors-you-must-memorize--net-16048

    * : 전체 요소대상
    #X : id
    .X : class
    X Y : descendant X 안에있는 Y (가중치)
    X:link : 클릭하기전 상태의 태그전체를 대상으로 하기위해 link 가상클래스 사용
    X:visited : 클릭했었거나 방문했었던 태그에 가상 클라스 사용
    X + Y : 인접 선택자 바로 뒤에오는 선택자
    X > Y : 직계 자식만 선택 
        ex ) div#x > ul { border : 1px }
        <div id="x">
            <ul>
                <li>List Item</li>
                    <ul>
                        <li> Child </li>
                    </ul>
                <li> List Item</li>
                <li> List Item</li>
                <li> List Item</li>
            </ul>
        </div>
        에서 #X > ul 선택자는 id 가 X인 div 의 직계자식인 ul만 대상으로 선택한다 . 위에 X Y 는 X 안에있는 모든 자식 Y 를 선택한다.
    X ~ Y : X + Y  기준 뒤에오는 모든 형제선택자 x 안에있는 모든 y  요소를 선택한다.
    X[href = "foo"]  : 값을 큰따옴표로 감쌌음을 기억하세요. 자바스크립트 CSS 선택자 엔진을 사용할 때 활용하는 것도 잊지 마세요. 가능하면, 비공식적인 선택자보다 CSS3 선택자를 항상 사용하세요.
    X[href*="tuts"] : 폭넓은 표현이다. *은 입력값이 속성값 어딘가에 있어야 한다.

    X[href^="http"] : 외부로 연결된 링크옆 작은 아이콘

    X[href$=".jpg"] : 이미지(.jpg 로 끝나는 url)로 링크가 걸린 전체 앵커를 찾을 것입니다. gif 와 png 는 영향 받지않는다.

    X[data-*="foo"] : 재참조
        ex) 	
<a href="path/to/image.jpg" data-filetype="image"> Image Link </a>
    X[foo~="bar"] : ~를 이용하면 띄어쓰기로 구분되는 값이있는 속성을 대상으로 할 수 있다.
        ex)  Target data-info attr that contains the value "external" 
            a[data-info~="external"] {
                color: red;
            }
            
             And which contain the value "image" 
            a[data-info~="image"] {
            border: 1px solid black;
            }

        X:checked : 라이도버튼이나 체크박스처럼 체크되는 인터페이스 요소만 대상으로 선택한다.

        X:after : 

        X:hover : 사용자동작 가상클래스 (?) (동적 의사 클래스)

        div:not(#container) : not 선택자 container 을 뺀 나머지 div 모두 

        X::가상 요소 : 같은요소 일부분에 스타일을 적용하는 가상요소를 사용할 수 있다. 
            ex) 첫 글자 p::first-letter {
                            float: left;
                            font-size: 2em;
                            font-weight: bold;
                            font-family: cursive;
                            padding-right: 2px;
                            }
        
        X:nth-child(n) : 특정요소를 지목 0부터시작하지않음 4번째마다 선택하려면 li:nth-child(4n) 위에서부터 시작

        X:nth-last-child(n) : 아래에서부터 특정요소를 지목 위와 똑같음 

        X:nth-of-type(n) : 3번째만 빼고 나머지 

        X:nth-last-of-type(n) : 위와동일 아래서부터 시작

        X:first-child : 첫번째 자식만 대상으로 삼는다.

        X:last-child : 위와반대로 마지막요소만 대상으로 삼는다.
 */

 /* 출처 http://tcpschool.com/css/css_selector_pseudoClass

 의사 클래스의 문법
 CSS에서 의사 클래스(pseudo-class)는 선택하고자 하는 HTML 요소의 특별한 '상태(state)'를 명시할 때 사용합니다.
 의사 클래스(pseudo-class)를 사용하기 위한 문법은 다음과 같습니다.

 선택자:의사클래스이름 {속성: 속성값;} 
 
 클래스(class)나 아이디(id)에도 의사 클래스(pseudo-class)를 사용할 수 있습니다.
 
 선택자.클래스이름:의사클래스이름 {속성: 속성값;} 
 
 선택자#아이디이름:의사클래스이름 {속성: 속성값;} */





 /* css 변수 만들기 & 변수 사용하기  */
 /* :root 의사 클래스에 선언해서 여러분의 HTML 문서 어디에서나 사용자 지정 속성에 접근할 수 있도록 구성하는 것입니다. */

 /* 그러나 반드시 이렇게 선언해야 하는 것은 아닙니다. 범위를 제한해야 하는 적절한 이유가 있을 수도 있으니까요. */

 /* 사용자 지정 속성의 이름은 대소문자를 구분합니다. 따라서 --my-color와 --My-color는 서로 다른 속성으로써 처리합니다 */

/* 전역변수(root) 및 지역변수(ex 태그명) 개념 적용 */
:root {
    --my-color- : #333;
}

/* my-color-olive 가 정의되지 않았을경우 #fff로 지정 
대소문자를 구분하기때문에 정의되지않은 --My-color-ovlive는 #fff표시 

*/
.test_value{
    background-color: var(--my-color- , #fff);
    color : var(--My-color-, #fff);
    text-align: center;
    text-shadow : 2px 2px 1px #333;
    margin: auto;
    width: 30%;
    border-radius: 20px;
    /* 뉴모피즘 (box shodow) */
    box-shadow:     
    6px 6px 6px rgba(0,0,0,0.15),
    -6px -6px 6px rgba(255,255,255,0.6),
    inset 2px 2px 5px rgba(0,0,0,0.03),
    inset -2px -2px 5px rgba(255,255,255,0.4);;
}
.test_value:focus,.test_value:hover {opacity: 0.85;}




/* css 포지션 

일단 모든 태그들은 처음에 position: static 상태입니다. (기본적으로 static이라 따로 써주지 않아도 됩니다.) 차례대로 왼쪽에서 오른쪽, 위에서 아래로 쌓입니다

여기서 태그의 위치를 살짝 변경하고 싶을 때 position: relative를 사용합니다. 이제 top(위), right(오른쪽), bottom(아래), left(왼쪽) 속성을 사용해 위치 조절이 가능합니다.
CSS 탭을 눌러 CSS를 확인해보세요. 각각의 태그가 기존 static이었을 때의 위치를 기준으로 top, right, bottom, left 방향으로 주어진 픽셀만큼 이동했습니다.


relative가 static인 상태를 기준으로 주어진 픽셀만큼 움직였다면, absolute는 position: static 속성을 가지고 있지 않은 부모를 기준으로 움직입니다. 만약 부모 중에 포지션이 relative, absolute, fixed인 태그가 없다면 가장 위의 태그(body)가 기준이 됩니다.

크롤을 내려도 그 자리에 계속 있죠. 바로 포지션이 fixed로 설정되어 있기 때문입니다. */

#fixed {
    background: yellow;
    position: fixed;
    right: 0;
  }

  #absolute {
    background: yellow;
    position: absolute;
    right: 0;
  }

  .top {
    position: relative;
    top: 5px;
    z-index: 1;
  }
  
  .right {
    position: relative;
    right: 5px;
  }
  
  .bottom {
    position: relative;
    bottom: 5px;
  }
  
  .left {
    position: relative;
    left: 5px;
  }

span, div {
  background: yellow;
  border: 1px solid red;
}




/* z-index  레이어 앞뒤 개념 ,겹쳐지는 페이지*/







::before{outline: none;}
::after{outline: none;}







/* flex 을 사용할때 단위를 rem 이나 em 을 사용해야한다. */
a{
    display: flex;
}



.test_place {
    width: 100%;
    height: auto;
}

.test_place li > a{
    float: left;
    width: 50px; height: 50px;
    margin: 10px;
    border: 1px solid #57f;
    border-radius: 5px;
    box-sizing: border-box;
    background-image: url("../res/icon/icon_m.png");
    background-repeat: no-repeat;
    background-size: auto auto;
}

.test_place li:nth-child(1) > a{
    background-position: -58px -62px;
}

.test_place li:nth-child(2) > a{
    background-position: -202px -268px;
}

.test_place  li:nth-child(3) > a{
    background-position: -508px -202px;
}

